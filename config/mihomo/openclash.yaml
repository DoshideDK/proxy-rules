# 必读！！！
# 注意规则在满足自己需求情况下，尽量做到精简，不要过度复杂，以免影响性能。
# 跑裸核用户请自行去掉下方控制面板模块的注释。
# 机场订阅
proxy-providers:   
  机场:
    url: "http://10.10.10.10:3043/subs/download/collection/airport?target=ClashMeta"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.google.com/generate_204
      interval: 300
    proxy: 直连     
  非直连家宽:
    url: "http://10.10.10.10:3043/subs/download/collection/%E9%9D%9E%E7%9B%B4%E8%BF%9E%E5%AE%B6%E5%AE%BD?target=ClashMeta"
    type: http
    interval: 86400
    health-check:
      enable: true
      url: https://www.google.com/generate_204
      interval: 300
    proxy: 直连
    override:
      dialer-proxy: 🏷️ 便宜节点      
   
    
# 节点信息
proxies:
  - {name: 直连, type: direct}

# 全局配置 
port: 7890
socks-port: 7891
redir-port: 7892
mixed-port: 7893
tproxy-port: 7894
allow-lan: true
bind-address: "*"
ipv6: false
unified-delay: true
tcp-concurrent: true
log-level: warning
find-process-mode: 'off'
# interface-name: en0
global-client-fingerprint: chrome
keep-alive-idle: 600
keep-alive-interval: 15
disable-keep-alive: false
profile:
  store-selected: true
  store-fake-ip: true

# 控制面板，external-ui 路径如果出现报错，根据你使用的插件进行调整，比如openclash改为： /etc/openclash/run  ，裸核跑改为/etc/mihomo/run
# 因容易造成新手面板启动问题，我注释掉了，需要的自行开启
#external-controller: 0.0.0.0:9090
#secret: ""
#external-ui: "/etc/nikki/run"
#external-ui-name: zashboard
#external-ui-url: "https://github.com/Zephyruso/zashboard/archive/refs/heads/gh-pages.zip"

# 嗅探
sniffer:
  enable: true
  sniff:
    HTTP:
      ports: [80, 8080-8880]
      override-destination: true
    TLS:
      ports: [443, 8443]
    QUIC:
      ports: [443, 8443]
  force-domain:
    - "+.v2ex.com"
  skip-domain:
    - "+.baidu.com"

# 入站  
tun:
  enable: true
  # system/gvisor/mixed
  stack: mixed
  dns-hijack: ["any:53", "tcp://any:53"]
  auto-route: true
  auto-redirect: true
  auto-detect-interface: true

# DNS模块
dns:
  enable: true
  listen: 0.0.0.0:1053
  ipv6: false
  respect-rules: true
  enhanced-mode: fake-ip
  fake-ip-range: 28.0.0.1/8
  fake-ip-filter-mode: blacklist
  fake-ip-filter:
    - "rule-set:private_domain,cn_domain"
    - "+.msftconnecttest.com"
    - "+.msftncsi.com"
    - "time.*.com"
    - "+.market.xiaomi.com"
  default-nameserver:
    - 223.5.5.5
  proxy-server-nameserver:
    - https://223.5.5.5/dns-query
  # namesever尽量用运营商提供的DNS
  nameserver:
    - 223.5.5.5
    - 119.29.29.29
 
# 出站策略，根据自己情况调整每个策略里分组排序，增删都可以，比如把美国自动放到第一个，比如删除香港故转，注意别漏掉表情逗号等。
# 如果相应分组没有筛选到对应的国家，请根据自己节点名字调整筛选关键字。
# 没有再使用锚点，是考虑很多新手修改难度，这样新手修改某个分组更容易些。
proxy-groups:
  - {name: 🚀 选择组, type: select, proxies: [🌐 选择节点, 🇭🇰 香港专线, 🇯🇵 日本专线, 🇸🇬 新加坡专线, 🇺🇲 美国专线, 🏠 家宽, 直连]}
  - {name: 🎯 直连, type: select, proxies: [直连, 🚀 选择组, 🇭🇰 香港专线, 🇯🇵 日本专线, 🇸🇬 新加坡专线, 🇺🇲 美国专线, 🏠 家宽]}
  - {name: 🌍 专线节点, type: select, proxies: [🚀 选择组, 🇭🇰 香港专线, 🇯🇵 日本专线, 🇸🇬 新加坡专线, 🇺🇲 美国专线, 🏠 家宽, 直连]}  
  - {name: 🐟 漏网之鱼, type: select, proxies: [🚀 选择组, 🏷️ 便宜节点, 🇭🇰 香港专线, 🇯🇵 日本专线, 🇸🇬 新加坡专线, 🇺🇲 美国专线, 🏠 家宽, 直连]}
  - {name: 🏷️ 便宜节点, type: select, proxies: [🇭🇰 香港便宜, 🏷️ 全部便宜]}
  - {name: 🏠 家宽, type: fallback, include-all: true, filter: "(?i)家|住宅|5x"}    
  - {name: 🇭🇰 香港专线, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))(?!.*(台|日|韩|新|深|美))(?!.*(家|住宅|5x))(?=.*(IEPL|IPLC|专线))(?=.*(ikuuu|69云)).*$"}
  - {name: 🇭🇰 香港便宜, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(港|HK|(?i)Hong))(?!.*(台|日|韩|新|深|美))(?!.*(家|住宅|5x))(?=.*(周树人|赔钱|ikuuu)).*$"}
  - {name: 🇯🇵 日本专线, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(日|JP|(?i)Japan))(?!.*(港|台|韩|新|美|尼日))(?!.*(家|住宅|5x))(?=.*(IEPL|IPLC|专线))(?=.*(ikuuu|69云)).*$"}
  - {name: 🇸🇬 新加坡专线, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(新加坡|坡|狮城|SG|Singapore))(?!.*(港|台|日|韩|深|美))(?!.*(家|住宅|5x))(?=.*(IEPL|IPLC|专线))(?=.*(ikuuu|69云)).*$"}
  - {name: 🇺🇲 美国专线, type: fallback, include-all: true, tolerance: 20, interval: 300, filter: "(?=.*(美|US|(?i)States|America))(?!.*(港|台|韩|新|日))(?!.*(家|住宅|5x))(?=.*( ))(?=.*(ikuuu|69云)).*$"}
  - {name: 🏷️ 全部便宜, type: url-test, include-all: true, tolerance: 20, interval: 300, filter: "(?!.*(家|住宅|5x))(?=.*(周树人|赔钱|ikuuu)).*$"}  
  - {name: 🌐 选择节点, type: select, include-all: true}

# 规则匹配
# 此规则部分没有做防泄露处理，因为弊严重大于利！
rules:
  - RULE-SET,speedtest_domain,🚀 选择组
 #- SRC-IP-CIDR,10.30.30.30/32,🇺🇲 美国专线  #整一个纯美国IP的服务器
  - AND,((SRC-IP-CIDR,10.10.10.10/32),(RULE-SET,google_domain)),🇺🇲 美国专线
  #- AND,((SRC-IP-CIDR,10.88.88.88/32),(DST-PORT,7000)),🏷️ 便宜节点

  - RULE-SET,private_domain,直连  
  - RULE-SET,my_direct,🎯 直连
  - RULE-SET,apple_domain,🎯 直连
  - RULE-SET,onedrive_domain,🎯 直连
 # - RULE-SET,microsoft_domain,🎯 直连  

  - RULE-SET,my_bandwidth-s,🏷️ 便宜节点
  - RULE-SET,telegram_ip,🏷️ 便宜节点      
  - RULE-SET,telegram_domain,🏷️ 便宜节点
  #- RULE-SET,netflix_ip,🏷️ 便宜节点
  #- RULE-SET,netflix_domain,🏷️ 便宜节点  
  - RULE-SET,tiktok_domain,🏷️ 便宜节点
  - RULE-SET,youtube_domain,🏷️ 便宜节点  
  - RULE-SET,porn_domain,🏷️ 便宜节点  

  - RULE-SET,my_pureip,🌍 专线节点
  - RULE-SET,proxylite,🌍 专线节点
  - RULE-SET,ai,🌍 专线节点
  - RULE-SET,paypal_domain,🌍 专线节点  
  - RULE-SET,github_domain,🌍 专线节点
  - RULE-SET,google_domain,🌍 专线节点
  - RULE-SET,google_ip,🌍 专线节点,no-resolve

  - RULE-SET,cn_domain,🎯 直连  
  - RULE-SET,cn_ip,🎯 直连
  
  - RULE-SET,my_bandwidth,🏷️ 便宜节点

  - RULE-SET,gfw_domain,🌍 专线节点
  - RULE-SET,geolocation-!cn,🌍 专线节点

  - MATCH,🐟 漏网之鱼

# 规则集
rule-anchor:
  ip: &ip {type: http, interval: 86400, behavior: ipcidr, format: mrs}
  domain: &domain {type: http, interval: 86400, behavior: domain, format: mrs}
  class: &class {type: http, interval: 86400, behavior: classical, format: text}
rule-providers: 
  private_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/private.mrs"}
  proxylite: { <<: *class, url: "https://raw.githubusercontent.com/qichiyuhub/rule/refs/heads/main/proxy.list"}
  ai: {  <<: *domain, url: "https://github.com/MetaCubeX/meta-rules-dat/raw/refs/heads/meta/geo/geosite/category-ai-!cn.mrs" }
  youtube_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/youtube.mrs"}
  google_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/google.mrs"}
  github_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/github.mrs"}
  telegram_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/telegram.mrs"}
  netflix_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/netflix.mrs"}
  paypal_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/paypal.mrs"}
  onedrive_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/onedrive.mrs"}
  microsoft_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/microsoft.mrs"}
  apple_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/apple-cn.mrs"}
  speedtest_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/ookla-speedtest.mrs"}
  tiktok_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/tiktok.mrs"}
  gfw_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/gfw.mrs"}
  geolocation-!cn: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/geolocation-!cn.mrs"}
  cn_domain: { <<: *domain, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geosite/cn.mrs"}
  cn_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/cn.mrs"}
  google_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/google.mrs"}
  telegram_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/telegram.mrs"}
  netflix_ip: { <<: *ip, url: "https://raw.githubusercontent.com/MetaCubeX/meta-rules-dat/meta/geo/geoip/netflix.mrs"}
  porn_domain: { <<: *class, url: "https://raw.githubusercontent.com/ACL4SSR/ACL4SSR/refs/heads/master/Clash/Ruleset/Porn.list"} 
  

  my_direct: { <<: *class, url: "https://raw.githubusercontent.com/DoshideDK/proxy-rules/refs/heads/main/rule-set/mihomo/direct.list"}
  my_bandwidth-s: { <<: *class, url: "https://raw.githubusercontent.com/DoshideDK/proxy-rules/refs/heads/main/rule-set/mihomo/bandwidth-s.list"}
  my_bandwidth: { <<: *class, url: "https://raw.githubusercontent.com/DoshideDK/proxy-rules/refs/heads/main/rule-set/mihomo/bandwidth.list"}  
  my_pureip: { <<: *class, url: "https://raw.githubusercontent.com/DoshideDK/proxy-rules/refs/heads/main/rule-set/mihomo/pureip.list"}  
